import { Wallet } from 'ethers';
import { createCipheriv, randomBytes, createDecipheriv } from 'crypto';

class WalletManager {
    constructor(key) {
        this.encryptedKeys = new Map();
        this.encryptionKey = Buffer.from(key.slice(0, 32), 'utf8'); // 256-bit key
    }

    async importWallet(privateKey) {
        const wallet = new Wallet(privateKey);
        const iv = randomBytes(16);
        const cipher = createCipheriv('aes-256-gcm', this.encryptionKey, iv);
        let encrypted = cipher.update(privateKey, 'utf8', 'hex');
        encrypted += cipher.final('hex');

        this.encryptedKeys.set(wallet.address, { encrypted, iv: iv.toString('hex') });
        return wallet.address;
    }

    async signTransaction(address, transaction) {
        if (!ethers.utils.isAddress(address)) {
            throw new Error('Invalid address');
        }

        const { encrypted, iv } = this.encryptedKeys.get(address);
        if (!encrypted || !iv) throw new Error('Wallet not found');

        const decipher = createDecipheriv('aes-256-gcm', this.encryptionKey, Buffer.from(iv, 'hex'));
        let decrypted = decipher.update(encrypted, 'hex', 'utf8');
        decrypted += decipher.final('utf8');

        const wallet = new Wallet(decrypted);
        return wallet.signTransaction(transaction);
    }

    // Optional: export as JSON wallet
    exportEncryptedWallet(address) {
        const { encrypted, iv } = this.encryptedKeys.get(address);
        return JSON.stringify({ address, encrypted, iv });
    }
}
